rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function signedInAndVerified() {
      return request.auth.uid != null &&
             request.auth.token.email_verified == true;
    }

    function activeOrgAdmin(orgID) {
      let member = get(/databases/$(database)/documents/organizations/$(orgID)/members/$(request.auth.token.email));
      return member.data.active == true && member.data.admin == true;
    }

    function activeOrgMember(orgID) {
      let member = get(/databases/$(database)/documents/organizations/$(orgID)/members/$(request.auth.token.email));
      return member.data.active == true;
    }

    // Allow clients to subscribe to their own token refresh trigger
    match /uids/{uid} {
      allow read: if signedInAndVerified()
                  && request.auth.uid == uid;
    }

    // Only allow verified emails with the 'invited' bit set, to change to 'active' (and remove the invited 'bit' in the same operation).
    match /organizations/{orgID}/members/{email} {
      allow write: if signedInAndVerified()
                   && request.auth.token.email == email
                   && resource.data.invited == true
                   && resource.data.active == false
                   && request.resource.data.invited == false
                   && request.resource.data.active == true;
    }

    // FIXME: Users can read and write their own user to org mapping. Currently only allows for 1 active org.
    match /userToOrg/{email} {
      allow write: if signedInAndVerified()
                   && activeOrgMember(request.resource.data.orgID)
                   && request.auth.token.email == email;

      allow read: if signedInAndVerified()
                  && request.auth.token.email == email;
    }

    // Allow everyone to read their own org api keys
    match /organizations/{orgID}/apiKeys/{uid} {
      allow read: if signedInAndVerified()
                  && activeOrgMember(orgID)
                  && request.auth.uid == uid;
    }

    // Active admin users can read and write **MEMBERS** in the org
    match /organizations/{orgID}/members/{document=**} {
      allow read, write: if signedInAndVerified()
                         && activeOrgAdmin(orgID);
    }

    // Active non-admin users can read anything in the org.
    match /organizations/{orgID}/{document=**} {
      allow read: if signedInAndVerified()
                  && activeOrgMember(orgID);
    }

    // Active users can read highlights from their org via the
    // highlights collectionGroup index.
    match /{path=**}/highlights/{document} {
      allow read, delete: if signedInAndVerified()
                          && activeOrgMember(resource.data.organizationID);

      allow update: if signedInAndVerified()
                    && activeOrgMember(resource.data.organizationID)
                    && !('organizationID' in request.resource.data) || request.resource.data.organizationID == resource.data.organizationID;

      allow create: if signedInAndVerified()
                    && activeOrgMember(request.resource.data.organizationID);
    }

    // Active users can read tags from their org via the
    // tags collectionGroup index.
    match /{path=**}/tags/{document} {
      allow read: if signedInAndVerified()
                  && activeOrgMember(resource.data.organizationID);
    }

    // Active non-admin users can write **ORGANIZATION METADATA** in the org.
    match /organizations/{orgID} {
      allow write: if signedInAndVerified()
                   && activeOrgMember(orgID);
    }

    // Active non-admin users can write **TAG GROUPS** in the org.
    match /organizations/{orgID}/tagGroups/{tagGroupID} {
      allow write: if signedInAndVerified()
                   && activeOrgMember(orgID);
    }

    // Active non-admin users can write **TAGS** in the org.
    match /organizations/{orgID}/tagGroups/{tagGroupID}/tags/{tagID} {
      allow create: if signedInAndVerified()
                    && activeOrgMember(request.resource.data.organizationID);

      allow update: if signedInAndVerified()
                    && activeOrgMember(orgID)
                    && !('organizationID' in request.resource.data) || request.resource.data.organizationID == resource.data.organizationID;

      allow delete: if signedInAndVerified()
                       && activeOrgMember(orgID);
    }

    // Active non-admin users can write **DOCUMENTS** in the org.
    match /organizations/{orgID}/documents/{document} {
      allow write: if signedInAndVerified()
                   && activeOrgMember(orgID);
    }

    // Active non-admin users can write **DOCUMENT DELTAS** in the org.
    match /organizations/{orgID}/documents/{document}/deltas/{delta} {
      allow write: if signedInAndVerified()
                   && activeOrgMember(orgID);
    }

    // Active non-admin users can write **PEOPLE** in the org.
    match /organizations/{orgID}/people/{document=**} {
      allow write: if signedInAndVerified()
                   && activeOrgMember(orgID);
    }

    // Active non-admin users can write **ANALYSES** in the org.
    match /organizations/{orgID}/analyses/{document=**} {
      allow write: if signedInAndVerified()
                   && activeOrgMember(orgID);
    }

    // Admin privileges to organizations.
    match /organizations/{orgID} {
      allow read: if signedInAndVerified()
                  && request.auth.token.email.matches('.*@quantap.com');
    }
  }
}
